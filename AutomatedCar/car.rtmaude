---Sample Car
--- < 0 | X: 0 , Y: 0 , A: Pi , Lspeed: 5 , Aspeed: Pi , D: 0.1 , 
---	  path: (x^2 - 3x + 5) , wheel: {left,right,straight} , 
---	  engine: {on, off} >

(tmod CAR is 

	protecting POSRAT-TIME-DOMAIN . *** Dense time domain

	sort Equation .
	--- Need to discuss how to deal with function formulas here. 

	--- To handle direction of the car steering
	sort Wheel .
	ops left right straight: -> Wheel [ctor] .
	
	--- To handle Engine on of off
	sort Engine .
	ops on off: -> Engine [ctor] .


	sort Car CarAttribute CarAttributes .
	subsort CarAttribute < CarAttributes .

	op <_|_> : Nat CarAttributes -> Reservoir [ctor format(b! o b! o b! o)] .
	op _`,_ : CarAttributes CarAttributes -> CarAttributes [ctor assoc comm] .
	--- Car Postion, X, Y and Angle
	op X:_ : Rat -> CarAttribute [ctor format(b! o)] .
	op Y:_ : Rat -> CarAttribute [ctor format(b! o)] .
	op A:_ : Rat -> CarAttribute [ctor format(b! o)] .
	--- Car Speed in a straight line and angular
	op Lspeed:_ : Rat -> CarAttribute [ctor format(b! o b!)] .
	op Aspeed:_ : Rat -> CarAttribute [ctor format(b! o b!)] .  
	--- Car allowed distance from path
	op D:_ : Rat -> CarAttribute [ctor format(b! o b!)] .
	--- Car Path equation
	op path:_ : Equation -> CarAttribute [ctor format(b! o)] .
	--- Car Wheel Direction
	op wheel:_ : Wheel -> CarAttribute [ctor format(b! o)] .
	--- Car on or off
	op engine:_ : Engine -> CarAttribute [ctor format(b! o)] .

	---Just in case we decide to have many cars in the future
	subsort Car < System .	
	op __ : System System -> System [ctor assoc comm] .

	---Rules to turn the Engine. Unlike that we will use the turn off one
	crl [off to on] 		? => ? if ? .
	crl [on to off] 		? => ? if ? .


	---Rules to turn the wheel (these should be simple)
	crl [straght to left] 		? => ? if ? .
	crl [straight to right] 	? => ? if ? .
	crl [left to straight]		? => ? if ? .
	crl [right to straight]		? => ? if ? .

	---Rules to tick time each wheel direction creates a progress rule
	crl [tick-straight] 	? => ? in time T if ? [nonexec] .
	crl [tick-left] 	? => ? in time T if ? [nonexec] .
	crl [tick-right]	? => ? in time T if ? [nonexec] .

endtm)

eof

---other useful stuff

(tmod MODEL-CHECK-RESERVOIR is
      including TIMED-MODEL-CHECKER .
      protecting RESERVOIR .

      ops macondo one-down : -> Prop [ctor] .
	  op res : Nat -> Prop .
	  
	  var S : System . vars W N : Nat .

      ceq {S} |= macondo = true if refill-all?(S) . 
      ceq {S} |= one-down = true if refill?(S) . 
	  
	  eq {hose(W, N) S} |= res(N) = true .
endtm)

(tmod TEST is inc MODEL-CHECK-RESERVOIR . 
	ops init1 init2 : -> System . 
	eq init1 = hose(10, 0) < 0 | thr: (15, 50), hth: 30, rte: 5 >
				< 1 | thr: (15, 50), hth: 30, rte: 5 > .
	eq init2 = hose(10, 0) < 0 | thr: (15, 50), hth: 30, rte: 5 >
				< 1 | thr: (15, 50), hth: 30, rte: 5 > 
				< 2 | thr: (15, 50), hth: 30, rte: 5 > .
endtm)

(set tick def 1 .)

(tsearch { init2 } =>* 
		 { S:System } in time < 5 .)
		 
(tsearch { init2 } =>* { < 0 | hth: 45, RA0:ReservoirAttributes >
	< 1 | hth: 10, RA1:ReservoirAttributes > 
	< 2 | hth: 10, RA2:ReservoirAttributes > } in time < 100 .)

(mc { init1 } |=t (~ [] <> macondo) in time < 5 .)

(mc { init2 } |=t (~ [] <> macondo) in time < 5 .)

(mc { init2 } |=t (~ [] <> one-down) in time < 5 .)

(mc { init2 } |=t [] ~ <> one-down in time < 5 .)
